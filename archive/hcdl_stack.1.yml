AWSTemplateFormatVersion: '2010-09-09'
Description: 'Healthcare data lake'

Parameters:
  ArtifactBucket: 
    Description: Bucket with artifacts such as Lambda functions and external libraries
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /healthcare-data-lake/artifact-bucket
  Hl7ParsingLibKey:
    Description: Key for our HL7 parsing library
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /healthcare-data-lake/hl7v2-parsing-Lambda-Layer
  Hl7ParsingFuncKey: 
    Description: Key for our HL7 parsing Lambda function
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /healthcare-data-lake/hl7v2-parsing-Lambda
  DataLakeBucketName:
    Description: Bucket for ingesting and processing healthcare data
    Type: String

Resources:
  Hl7apyLayer:
    Type: AWS::Lambda::LayerVersion
    Properties: 
      CompatibleRuntimes: ["python2.7", "python3.6", "python3.7", "python3.8"]
      Content: 
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref Hl7ParsingLibKey
      LayerName: "hl7apy"
      Description: "HL7apy parser library"
      LicenseInfo: "MIT"
  
  # Role assumed by our Lambda parsing function, provides permission to access the data lake bucket
  LambdaTriggerRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: ['lambda.amazonaws.com']
          Action: ['sts:AssumeRole']
      ManagedPolicyArns: 
      # Provides access to CloudWatch for logging
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: data-lake-bucket-access
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          # Get and put objects in our bucket
          - Effect: Allow
            Action: ['s3:GetObject', 's3:PutObject']
            Resource: !Sub "arn:aws:s3:::${DataLakeBucketName}/*" 

  Hl7Er7ParserLambda:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: "hl7_er7_to_json"
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref Hl7ParsingFuncKey
      Description: "HL7 parser from ER7 to JSON"
      Handler: "hl7_parser.lambda_handler"
      Layers: [!Ref Hl7apyLayer]
      Role: !GetAtt LambdaTriggerRole.Arn
      Runtime: python3.8
      Timeout: 30
      MemorySize: 256

  # Permision for S3 to invoke Lambda
  BucketLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref Hl7Er7ParserLambda
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId" # Include our source account for added security
      SourceArn: !Sub "arn:aws:s3:::${DataLakeBucketName}"
  
  # S3 data lake bucket
  DataLakeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DataLakeBucketName
      
      # Encryption at rest
      BucketEncryption: 
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      
      # Block all public access
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true   
        
      # Lambda trigger
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Function: !GetAtt Hl7Er7ParserLambda.Arn
          Filter:
            S3Key:
              Rules: [{Name: prefix, Value: raw/}]

  # Cognito resources
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      UsernameAttributes: [email]
      
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}-UserPoolClient
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_ADMIN_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
  
  # API Gateway 
  Er7ToJsonLambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: ['lambda.amazonaws.com']
          Action: ['sts:AssumeRole']
      ManagedPolicyArns: 
      # Provides access to CloudWatch for logging
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  
  Er7ToJsonLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-APIGatewayHandler
      Runtime: nodejs12.x  
      Role: !GetAtt Er7ToJsonLambdaRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.info("EVENT\n" + JSON.stringify(event, null, 2))
            // TODO implement
            const response = {
                statusCode: 200,
                body: JSON.stringify(event),
            };
            return response;
          };
          
  HttpAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${AWS::StackName}-APIGateway
      ProtocolType: HTTP
  
  MyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: [Er7ToJsonLambda]
    Properties: 
      ApiId: !Ref HttpAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Er7ToJsonLambda.Arn}/invocations
      PayloadFormatVersion: 2.0

  MyAuthorizor:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties: 
      Name: !Sub ${AWS::StackName}-Authorizer
      ApiId: !Ref HttpAPI
      AuthorizerType: JWT
      IdentitySource: [$request.header.Authorization]
      JwtConfiguration: 
        Audience: [!Ref UserPoolClient]
        Issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}

  Hl7Er7PostRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpAPI
      RouteKey: "POST /hl7v2/er7"
      AuthorizationType: JWT
      AuthorizerId: !Ref MyAuthorizor
      Target: !Join
        - /
        - - integrations
          - !Ref MyIntegration

  DefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties: 
      ApiId: !Ref HttpAPI
      AutoDeploy: true
      Description: Default stage
      StageName: $default

  # Permission for the HTTP gateway to invoke our function
  HttpLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: [HttpAPI]
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Er7ToJsonLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpAPI}/*"

Outputs:
  UserPoolId:
    Description: User Pool ID
    Value: !Ref UserPool
  AppClientId:
    Description: App Client ID
    Value: !Ref UserPoolClient
  ApiGatewayId:
    Description: API Gateway ID
    Value: !Ref HttpAPI