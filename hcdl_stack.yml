AWSTemplateFormatVersion: '2010-09-09'
Description: 'Healthcare data lake'

Parameters:
  ArtifactBucket:
    Description: Bucket with artifacts such as Lambda functions and external libraries
    Type: AWS::SSM::Parameter::Value<String>
    Default: /healthcare-data-lake/artifact-bucket
  Hl7ParsingLibKey:
    Description: Key for our HL7 parsing library
    Type: AWS::SSM::Parameter::Value<String>
    Default: /healthcare-data-lake/hl7v2-parsing-Lambda-Layer
  Hl7ParsingFuncKey:
    Description: Key for our HL7 parsing Lambda function
    Type: AWS::SSM::Parameter::Value<String>
    Default: /healthcare-data-lake/hl7v2-parsing-Lambda
  DataLakeBucketName:
    Description: Bucket for ingesting and processing healthcare data
    Type: String

Resources:
  #-------------------------------------------------------------- Data Lake bucket
  DataLakeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DataLakeBucketName

      # Encryption at rest
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256

      # Block all public access
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  #-------------------------------------------------------------- Cognito
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      UsernameAttributes: [email]

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}-UserPoolClient
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_ADMIN_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED

  #-------------------------------------------------------------- Lambda functions
  Hl7apyLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes: [python2.7, python3.6, python3.7, python3.8]
      Content:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref Hl7ParsingLibKey
      LayerName: hl7apy
      Description: "HL7apy parser library"
      LicenseInfo: MIT

  # Role assumed by our Lambda parsing function, provides permission to access the data lake bucket
  Er7ToJsonLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole # Provides access to CloudWatch for logging
      Policies:
      - PolicyName: data-lake-bucket-access
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: ['s3:GetObject', 's3:PutObject', 's3:PutObjectTagging']
            Resource:
            - !Join ['', ['arn:aws:s3:::', !Ref DataLakeBucket, /*]]
      - PolicyName: dynamodb-data-catalog-access
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: ['dynamodb:*']
            Resource:
            - !Sub arn:aws:dynamodb:*:*:table/${ApplicationTable}
            - !Sub arn:aws:dynamodb:*:*:table/${ApplicationTable}/index/*

  Er7ToJsonLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}_er7_to_json
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref Hl7ParsingFuncKey
      Description: HL7 converter from ER7 to JSON
      Handler: er7_to_json.lambda_handler
      Layers: [!Ref Hl7apyLayer]
      Role: !GetAtt Er7ToJsonLambdaRole.Arn
      Environment:
        Variables:
          data_lake_bucket: !Ref DataLakeBucketName
          application_table: !Ref ApplicationTable
      Runtime: python3.8
      Timeout: 30
      MemorySize: 256

  #-------------------------------------------------------------- API Gateway
  HttpAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${AWS::StackName}-APIGateway
      ProtocolType: HTTP

  DefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpAPI
      AutoDeploy: true
      Description: Default stage
      StageName: $default

  Er7ToJsonIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: [Er7ToJsonLambda]
    Properties:
      ApiId: !Ref HttpAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Er7ToJsonLambda.Arn}/invocations
      PayloadFormatVersion: 2.0

  MyAuthorizor:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: !Sub ${AWS::StackName}-Authorizer
      ApiId: !Ref HttpAPI
      AuthorizerType: JWT
      IdentitySource: [$request.header.Authorization]
      JwtConfiguration:
        Audience: [!Ref UserPoolClient]
        Issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}

  Hl7Er7PostRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpAPI
      RouteKey: "POST /hl7v2/er7"
      AuthorizationType: JWT
      AuthorizerId: !Ref MyAuthorizor
      Target: !Join [/, [integrations, !Ref Er7ToJsonIntegration]]

  # Permission for the HTTP gateway to invoke our function
  HttpEr7ToJsonLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: [HttpAPI]
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Er7ToJsonLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpAPI}/*

  #-------------------------------------------------------------- DynamoDB
  ApplicationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
        - AttributeName: "GSI1PK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      TableName: !Sub ${AWS::StackName}-application_table
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: "GSI1"
          KeySchema:
            - AttributeName: "GSI1PK"
              KeyType: "HASH"
          Projection:
            ProjectionType: KEYS_ONLY
